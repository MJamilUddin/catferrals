{% comment %}
  Catferrals Dynamic URL Configuration
  Provides dynamic URL generation for all widgets to replace hardcoded URLs
  VERSION: 3.0.0 - Fully Dynamic
{% endcomment %}

<script>
(function() {
  'use strict';
  
  window.CatferralsConfig = {
    // Dynamically detect the current server URL
    getBaseUrl: function() {
      // CRITICAL: Always use localhost in development, even when running on Shopify store domain
      // The widgets run on the Shopify store but need to communicate with our local development server
      
      // Try cached working port first
      const cachedPort = this.detectAppServerPort();
      if (cachedPort) {
        return `http://localhost:${cachedPort}`;
      }
      
      // Fallback to current server port (from terminal output)
      return 'http://localhost:56397';
    },
    
    // Detect the app server port dynamically
    detectAppServerPort: function() {
      // Try to read from localStorage if we've successfully connected before
      const lastWorkingPort = localStorage.getItem('catferrals-app-port');
      if (lastWorkingPort) {
        return parseInt(lastWorkingPort);
      }
      
      // No cached port found
      return null;
    },
    
    // Test connection to app server and cache the working port
    testAndCacheConnection: function(port, callback) {
      const testUrl = `http://localhost:${port}/api/referral-dashboard?test=1`;
      
      return fetch(testUrl, { 
        method: 'GET',
        timeout: 2000 
      })
      .then(response => {
        if (response.ok || response.status === 400) { // 400 is OK, means server is running
          localStorage.setItem('catferrals-app-port', port.toString());
          console.log(`‚úÖ Catferrals: Connected to app server on port ${port}`);
          if (callback) callback(port);
          return true;
        }
        return false;
      })
      .catch(() => {
        console.log(`‚ùå Catferrals: Failed to connect to port ${port}`);
        return false;
      });
    },
    
    // Generate API URLs dynamically
    getApiUrl: function(endpoint) {
      const baseUrl = this.getBaseUrl();
      const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;
      return `${baseUrl}${normalizedEndpoint}`;
    },
    
    // Generate tracking URLs dynamically
    getTrackingUrl: function(code) {
      return this.getApiUrl(`/api/track/${code}`);
    },
    
    // Generate dashboard API URL
    getDashboardApiUrl: function() {
      return this.getApiUrl('/api/referral-dashboard');
    },
    
    // Generate portal URL
    getPortalUrl: function(shop, email) {
      const baseUrl = this.getBaseUrl();
      return `${baseUrl}/portal?shop=${encodeURIComponent(shop)}&email=${encodeURIComponent(email)}`;
    },
    
    // Generate verification status URL
    getVerificationStatusUrl: function(code, token, shop) {
      const baseUrl = this.getBaseUrl();
      return `${baseUrl}/proxy/verify?code=${encodeURIComponent(code)}&verify=${encodeURIComponent(token)}&shop=${encodeURIComponent(shop)}`;
    },
    
    // Generate verify referrer URL
    getVerifyReferrerUrl: function(code, token, shop) {
      const baseUrl = this.getBaseUrl();
      return `${baseUrl}/apps/referrals/verify`;
    },
    
    // Generate dashboard URL with parameters
    getDashboardUrl: function(email, shop) {
      const baseUrl = this.getBaseUrl();
      return `${baseUrl}/api/referral-dashboard?email=${encodeURIComponent(email)}&shop=${encodeURIComponent(shop)}`;
    },
    
    // Auto-detect working port on page load
    autoDetectPort: function() {
      // Try common development ports (including current server port from terminal)
      const commonPorts = [56397, 3000, 3001, 4000, 5000, 8000, 8080];
      const self = this;
      
      // Try each port sequentially
      let portIndex = 0;
      function tryNextPort() {
        if (portIndex >= commonPorts.length) {
          console.log('‚ùå Catferrals: No working port found');
          return;
        }
        
        const port = commonPorts[portIndex];
        self.testAndCacheConnection(port, function(workingPort) {
          console.log(`‚úÖ Catferrals: Found working port ${workingPort}`);
        }).then(success => {
          if (!success) {
            portIndex++;
            setTimeout(tryNextPort, 100); // Try next port after brief delay
          }
        });
      }
      
      // Start port detection
      tryNextPort();
    }
  };
  
  // Initialize port detection
  window.CatferralsConfig.autoDetectPort();
  
  console.log('‚úÖ Catferrals Dynamic URL Config loaded');
  console.log('üìç Current hostname:', window.location.hostname);
  console.log('üìç Base URL:', window.CatferralsConfig.getBaseUrl());
  console.log('üìç Dashboard API:', window.CatferralsConfig.getDashboardApiUrl());
  
  // Test connection immediately to current server port
  window.CatferralsConfig.testAndCacheConnection(56397, function(port) {
    console.log('‚úÖ Catferrals: Successfully connected to development server on port', port);
  });
  
})();
</script> 